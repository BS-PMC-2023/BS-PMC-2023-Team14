[{"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\index.js":"1","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\App.js":"2","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Volunteer\\Volunteers.jsx":"3","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\AboutPage\\AboutPage.jsx":"4","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\UserTypeForm\\UserTypeForm.jsx":"5","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\LoginVolunteer\\index.jsx":"6","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\HowToUse\\HowToUse.jsx":"7","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Contact\\contact.jsx":"8","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Navbar\\Navbar.jsx":"9","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Login\\index.jsx":"10","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Main\\index.jsx":"11","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Singup\\index.jsx":"12","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\map.jsx":"13"},{"size":234,"mtime":1683828550897,"results":"14","hashOfConfig":"15"},{"size":1706,"mtime":1683829497360,"results":"16","hashOfConfig":"15"},{"size":887,"mtime":1683748766814,"results":"17","hashOfConfig":"15"},{"size":2680,"mtime":1683748766766,"results":"18","hashOfConfig":"15"},{"size":1313,"mtime":1683748766800,"results":"19","hashOfConfig":"15"},{"size":2247,"mtime":1683748766789,"results":"20","hashOfConfig":"15"},{"size":1058,"mtime":1683748766782,"results":"21","hashOfConfig":"15"},{"size":2470,"mtime":1682453336139,"results":"22","hashOfConfig":"15"},{"size":2690,"mtime":1683748907138,"results":"23","hashOfConfig":"15"},{"size":2229,"mtime":1683827568782,"results":"24","hashOfConfig":"15"},{"size":884,"mtime":1683748907129,"results":"25","hashOfConfig":"15"},{"size":4018,"mtime":1682846920476,"results":"26","hashOfConfig":"15"},{"size":12474,"mtime":1683748907144,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"3tdans",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\index.js",["73"],[],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n\t\t\t<App />,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\App.js",["74"],[],"import { BrowserRouter, Route, Routes, Navigate } from \"react-router-dom\";\r\nimport Main from \"./components/Main\";\r\nimport Signup from \"./components/Singup\";\r\nimport Login from \"./components/Login\";\r\nimport Contact from \"./components/Contact/contact\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Volunteer from \"./components/Volunteer/Volunteers.jsx\";\r\nimport AboutPage from \"./components/AboutPage/AboutPage.jsx\";\r\nimport UserTypeForm from \"./components/UserTypeForm/UserTypeForm.jsx\";\r\nimport LoginVolunteer from \"./components/LoginVolunteer/index.jsx\";\r\nimport HowToUse from \"./components/HowToUse/HowToUse.jsx\";\r\nfunction App() {\r\n  const user = localStorage.getItem(\"token\");\r\n  const Volunteers = localStorage.getItem(\"token\");\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <BrowserRouter>\r\n      {user && <Navbar handleLogout={handleLogout} />}\r\n      <Routes>\r\n        {user && <Route path=\"/\" exact element={<Main />} />}\r\n        <Route path=\"/signup\" exact element={<Signup />} />\r\n        <Route path=\"/login\" exact element={<Login />} />\r\n\r\n        <Route path=\"/contact\" exact element={<Contact />} />\r\n        <Route path=\"/Volunteers\" exact element={<Volunteer />} />\r\n        <Route path=\"/AboutPage\" exact element={<AboutPage />} />\r\n        <Route path=\"/UserTypeForm\" exact element={<UserTypeForm />} />\r\n        <Route path=\"/\" element={<Navigate replace to=\"/UserTypeForm\" />} />\r\n        <Route path=\"/LoginVolunteer\" exact element={<LoginVolunteer />} />\r\n        <Route path=\"/HowToUse\" exact element={<HowToUse />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default App;\r\n","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Volunteer\\Volunteers.jsx",[],[],"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\AboutPage\\AboutPage.jsx",["75","76"],[],"import \"./AboutPage.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction AboutPage() {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/users\")\r\n      .then((response) => {\r\n        setUsers(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <main>\r\n      <body>\r\n        <header>\r\n          <h1>HealthFuel</h1>\r\n        </header>\r\n\r\n        <main>\r\n          <section id=\"about\">\r\n            <h2>About Us</h2>\r\n            <p>\r\n              Excess obesity and malnutrition are serious social problems that\r\n              can have negative health impacts on individuals and society.\r\n              According to the World Health Organization, worldwide obesity\r\n              rates have tripled since 1975, with over 1.9 billion adults being\r\n              classified as overweight or obese. In addition, malnutrition\r\n              affects 1 in 3 people globally, with undernutrition and\r\n              micronutrient deficiencies being major causes of morbidity and\r\n              mortality. These problems are particularly prevalent in low- and\r\n              middle-income countries, where access to healthy foods and\r\n              nutrition education may be limited.\r\n            </p>\r\n            <p>\r\n              To address these issues, a comprehensive solution is needed that\r\n              empowers individuals to make informed decisions about their\r\n              nutrition and helps them achieve their health and wellness goals.\r\n              Providing access to a database of nutritional information through\r\n              a user-friendly website can be a powerful tool in achieving this\r\n              goal. By leveraging the power of APIs and open databases,\r\n              individuals can easily access comprehensive and accurate\r\n              nutritional information and track their own nutrition to meet\r\n              their personalized goals. Such a website can also serve as an\r\n              educational resource for individuals seeking to learn more about\r\n              nutrition and how it impacts their health. By addressing the root\r\n              causes of excess obesity and malnutrition, we can work towards\r\n              creating a healthier and more equitable society.\r\n            </p>\r\n\r\n            <img src=\"../images/photo1.png\" alt=\"Image\" />\r\n          </section>\r\n        </main>\r\n\r\n        <footer>\r\n          <p>&copy; 2023 HealthFuel. All rights reserved.</p>\r\n        </footer>\r\n      </body>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AboutPage;\r\n","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\UserTypeForm\\UserTypeForm.jsx",["77","78"],[],"import { useState } from \"react\";\r\nimport '../css/UserTypeForm.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction UserTypeForm() {\r\n  const [userType, setUserType] = useState('');\r\n\r\n  const handleInputChange = (event) => {\r\n    setUserType(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Handle form submission\r\n  };\r\n\r\n  return (\r\n    <div className=\"UserTypeForm_container\">\r\n    <div className=\"UserTypeForm_form_container\">\r\n    <div className=\"left\">\r\n    <form className=\"form_container\" onSubmit={handleSubmit}>\r\n      <h1>LOGIN AS</h1>\r\n      <div className=\"right\">\r\n          <Link to=\"/loginAdmin\">\r\n            <button type=\"button\" className=\"white_btn\">\r\n              Admin\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      <div className=\"right\">\r\n          <Link to=\"/LoginVolunteer\">\r\n            <button type=\"button\" className=\"white_btn\">\r\n            Volunteer\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        <div className=\"right\">\r\n          <Link to=\"/login\">\r\n            <button type=\"button\" className=\"white_btn\">\r\n            User\r\n            </button>\r\n          </Link>\r\n        </div>\r\n    </form>\r\n    </div>\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default UserTypeForm;\r\n\r\n","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\LoginVolunteer\\index.jsx",[],[],"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\HowToUse\\HowToUse.jsx",[],[],"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Contact\\contact.jsx",[],[],"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Navbar\\Navbar.jsx",[],[],"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Login\\index.jsx",[],[],"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Main\\index.jsx",["79"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport Map from \"../map\";\r\nimport \"../Main/styles.module.css\"\r\n\r\nconst Main = ({ user }) => {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    window.location.reload();\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/users')\r\n      .then(response => {\r\n        setUsers(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {user && <Navbar handleLogout={handleLogout} />}\r\n      \r\n      <div className=\"mainDiv\">\r\n        <p>with this map You can see nearby gyms for your current location.</p>\r\n            <Map/>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\Singup\\index.jsx",[],[],"C:\\Users\\salah\\Documents\\GitHub\\BS-PMC-2023-Team14\\client\\src\\components\\map.jsx",["80","81","82"],[],"/*import React, { useRef, useEffect, useState } from 'react';\r\nimport * as maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport './map.css';\r\n\r\nexport default function Map(){\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const marker = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n\r\n  useEffect(() => {\r\n    if (map.current) return;\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: 'https://tilehosting.com/styles/streets/style.json?key={QSuL3qpAZcPzrtCo2hyU}',\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    marker.current = new maplibregl.Marker()\r\n      .setLngLat([lng, lat])\r\n      .addTo(map.current);\r\n\r\n    map.current.on('move', () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n\r\n    navigator.geolocation.getCurrentPosition(async position => {\r\n      setLng(position.coords.longitude);\r\n      setLat(position.coords.latitude);\r\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\r\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\r\n\r\n      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${position.coords.latitude}&lon=${position.coords.longitude}`);\r\n      const data = await response.json();\r\n      const name = data.display_name;\r\n\r\n      const response2 = await fetch(`https://nominatim.openstreetmap.org/search?format=jsonv2&q=gym&limit=10&lat=${position.coords.latitude}&lon=${position.coords.longitude}`);\r\n      const data2 = await response2.json();\r\n      const features = data2;\r\n\r\n      const gyms = [];\r\n      features.forEach(feature => {\r\n        const { display_name, lat, lon } = feature;\r\n        const gym = {\r\n          name: display_name,\r\n          location: [lon, lat]\r\n        };\r\n        gyms.push(gym);\r\n        new maplibregl.Marker({ color: 'green' })\r\n          .setLngLat([lon, lat])\r\n          .addTo(map.current);\r\n      });\r\n      setNearbyGyms(gyms);\r\n    });\r\n  }, [lng, lat, zoom]);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapContainer} className=\"map\" />\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n\r\n/*import React, { useRef, useEffect, useState } from 'react';\r\nimport * as maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport './map.css';\r\n\r\nexport default function Map(){\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const marker = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n  const [API_KEY] = useState('FZT7hZoohtpQoDTWktP6');\r\n\r\n  useEffect(() => {\r\n    if (map.current) return;\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: `https://api.maptiler.com/maps/streets-v2/style.json?key=${API_KEY}`,\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    marker.current = new maplibregl.Marker()\r\n      .setLngLat([lng, lat])\r\n      .addTo(map.current);\r\n\r\n    map.current.on('move', () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n\r\n    navigator.geolocation.getCurrentPosition(async position => {\r\n      setLng(position.coords.longitude);\r\n      setLat(position.coords.latitude);\r\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\r\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\r\n\r\n      const response = await fetch(`https://api.maptiler.com/maps/streets-v2/places/${position.coords.longitude},${position.coords.latitude}.json?key=${API_KEY}`);\r\n      const data = await response.json();\r\n      const features = data.features;\r\n\r\n      const gyms = [];\r\n      features.forEach(feature => {\r\n        const { name, coordinates } = feature;\r\n        const gym = {\r\n          name: name,\r\n          location: coordinates\r\n        };\r\n        gyms.push(gym);\r\n        new maplibregl.Marker({ color: 'green' })\r\n          .setLngLat(coordinates)\r\n          .addTo(map.current);\r\n      });\r\n      setNearbyGyms(gyms);\r\n    });\r\n  }, [lng, lat, zoom]);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapContainer} className=\"map\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n*/\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport * as maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport './map.css';\r\n\r\nexport default function Map(){\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const marker = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n  const [API_KEY] = useState('FZT7hZoohtpQoDTWktP6');\r\n\r\n  useEffect(() => {\r\n    if (map.current) return;\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: `https://api.maptiler.com/maps/streets-v2/style.json?key=${API_KEY}`,\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    marker.current = new maplibregl.Marker()\r\n      .setLngLat([lng, lat])\r\n      .addTo(map.current);\r\n\r\n    map.current.on('move', () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      setLng(position.coords.longitude);\r\n      setLat(position.coords.latitude);\r\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\r\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\r\n    });\r\n  }, [lng, lat, zoom]);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapContainer} className=\"map\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n/*\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './map.css';\r\nconst API_KEY = 'FZT7hZoohtpQoDTWktP6';\r\n\r\nexport default function Map() {\r\n  const mapRef = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lat, setLat] = useState(0);\r\n  const [lng, setLng] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n\r\n  useEffect(() => {\r\n    // create map and center it on the user's location\r\n    const map = L.map(mapRef.current).setView([lat, lng], zoom);\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\r\n    }).addTo(map);\r\n\r\n\r\n    function distance(lat1, lon1, lat2, lon2) {\r\n      const R = 6371e3; // Earth radius in meters\r\n      const phi1 = lat1 * Math.PI / 180;\r\n      const phi2 = lat2 * Math.PI / 180;\r\n      const deltaPhi = (lat2 - lat1) * Math.PI / 180;\r\n      const deltaLambda = (lon2 - lon1) * Math.PI / 180;\r\n    \r\n      const a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\r\n              Math.cos(phi1) * Math.cos(phi2) *\r\n              Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    \r\n      return R * c;\r\n    };\r\n    \r\n    \r\n    // add markers for nearby sports centers\r\n    async function getNearbyGyms(lng, lat) {\r\n      const gyms = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/gym.json?proximity=${lng},${lat}&access_token=${API_KEY}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          const features = data.features;\r\n          const gymFeatures = features.filter(feature => feature.properties.category === 'fitness');\r\n          return gymFeatures;\r\n        })\r\n        .catch(error => console.log(error));\r\n      \r\n      if (map.current) {\r\n        const nearbyGyms = map.current.queryRenderedFeatures({\r\n          layers: ['gyms']\r\n        }).filter(gym => gym.geometry.coordinates)\r\n          .map(gym => {\r\n            return {\r\n              name: gym.properties.name,\r\n              address: gym.properties.address,\r\n              distance: distance(lng, lat, gym.geometry.coordinates[0], gym.geometry.coordinates[1])\r\n            }\r\n          })\r\n          .sort((a, b) => a.distance - b.distance);\r\n    \r\n        setNearbyGyms(nearbyGyms);\r\n      }\r\n      \r\n      return gyms;\r\n    };\r\n\r\n    getNearbyGyms();\r\n\r\n    // update map position when user moves the map\r\n    map.on('moveend', () => {\r\n      setLat(map.getCenter().lat.toFixed(4));\r\n      setLng(map.getCenter().lng.toFixed(4));\r\n      setZoom(map.getZoom().toFixed(2));\r\n      getNearbyGyms();\r\n    });\r\n\r\n    // center map on user's location\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setLat(position.coords.latitude);\r\n      setLng(position.coords.longitude);\r\n      map.setView([position.coords.latitude, position.coords.longitude], zoom);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapRef} className=\"map\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n*/\r\n\r\n\r\n/*\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst Map = () => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // create map and set initial view to a default location\r\n    const map = L.map(mapRef.current).setView([51.505, -0.09], 13);\r\n\r\n    // add tile layer from OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: 'Map data © <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n      maxZoom: 19,\r\n    }).addTo(map);\r\n\r\n    // add a marker to the map at the default location\r\n    L.marker([51.505, -0.09]).addTo(map);\r\n  }, []);\r\n\r\n  return <div ref={mapRef} style={{ height: '500px' }}></div>;\r\n};\r\n\r\nexport default Map;\r\n*/\r\n/*\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-control-geocoder/dist/Control.Geocoder.css';\r\nimport 'leaflet-control-geocoder/dist/Control.Geocoder.js';\r\n\r\nconst Map = () => {\r\n  const mapRef = useRef(null);\r\n  const geocoderRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // create map and set initial view to a default location\r\n    const map = L.map(mapRef.current).setView([51.505, -0.09], 13);\r\n\r\n    // add tile layer from OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: 'Map data © <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n      maxZoom: 19,\r\n    }).addTo(map);\r\n\r\n    // add search field to the map\r\n    geocoderRef.current = L.Control.geocoder({\r\n      defaultMarkGeocode: false,\r\n    }).on('markgeocode', function (e) {\r\n      // center the map on the selected location\r\n      map.setView(e.geocode.center, 13);\r\n\r\n      // add a marker to the map at the selected location\r\n      L.marker(e.geocode.center).addTo(map);\r\n    }).addTo(map);\r\n\r\n    // search for gyms in the map area\r\n    searchForGyms(map);\r\n  }, []);\r\n\r\n  const searchForGyms = (map) => {\r\n    // set search parameters\r\n    const params = {\r\n      q: 'gym',\r\n      format: 'json',\r\n      addressdetails: 1,\r\n      bounded: 1,\r\n      viewbox: map.getBounds().toBBoxString(),\r\n    };\r\n\r\n    // make a request to the Nominatim Search API\r\n    fetch(`https://nominatim.openstreetmap.org/search?${new URLSearchParams(params)}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // add markers for each gym found\r\n        data.forEach(result => {\r\n          const marker = L.marker([result.lat, result.lon]).addTo(map);\r\n          const popupContent = `\r\n            <b>${result.display_name}</b><br>\r\n            ${result.address.postcode} ${result.address.city}<br>\r\n            ${result.address.road} ${result.address.house_number}\r\n          `;\r\n          marker.bindPopup(popupContent);\r\n        });\r\n      })\r\n      .catch(error => console.error(error));\r\n  };  \r\n\r\n  return <div ref={mapRef} style={{ height: '500px' }}></div>;\r\n};\r\n\r\nexport default Map;\r\n*/",{"ruleId":"83","severity":1,"message":"84","line":3,"column":10,"nodeType":"85","messageId":"86","endLine":3,"endColumn":23},{"ruleId":"83","severity":1,"message":"87","line":14,"column":9,"nodeType":"85","messageId":"86","endLine":14,"endColumn":19},{"ruleId":"83","severity":1,"message":"88","line":6,"column":10,"nodeType":"85","messageId":"86","endLine":6,"endColumn":15},{"ruleId":"89","severity":1,"message":"90","line":57,"column":13,"nodeType":"91","endLine":57,"endColumn":59},{"ruleId":"83","severity":1,"message":"92","line":6,"column":10,"nodeType":"85","messageId":"86","endLine":6,"endColumn":18},{"ruleId":"83","severity":1,"message":"93","line":8,"column":9,"nodeType":"85","messageId":"86","endLine":8,"endColumn":26},{"ruleId":"83","severity":1,"message":"88","line":8,"column":10,"nodeType":"85","messageId":"86","endLine":8,"endColumn":15},{"ruleId":"83","severity":1,"message":"94","line":149,"column":10,"nodeType":"85","messageId":"86","endLine":149,"endColumn":20},{"ruleId":"83","severity":1,"message":"95","line":149,"column":22,"nodeType":"85","messageId":"86","endLine":149,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":179,"column":6,"nodeType":"98","endLine":179,"endColumn":22,"suggestions":"99"},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Volunteers' is assigned a value but never used.","'users' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'userType' is assigned a value but never used.","'handleInputChange' is assigned a value but never used.","'nearbyGyms' is assigned a value but never used.","'setNearbyGyms' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'API_KEY'. Either include it or remove the dependency array.","ArrayExpression",["100"],{"desc":"101","fix":"102"},"Update the dependencies array to be: [lng, lat, zoom, API_KEY]",{"range":"103","text":"104"},[6118,6134],"[lng, lat, zoom, API_KEY]"]