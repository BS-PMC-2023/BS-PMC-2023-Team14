{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salah\\\\Documents\\\\GitHub\\\\BS-PMC-2023-Team14\\\\client\\\\src\\\\components\\\\map.jsx\",\n  _s = $RefreshSig$();\n/*import React, { useRef, useEffect, useState } from 'react';\r\nimport * as maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport './map.css';\r\n\r\nexport default function Map(){\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const marker = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n\r\n  useEffect(() => {\r\n    if (map.current) return;\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: 'https://tilehosting.com/styles/streets/style.json?key={QSuL3qpAZcPzrtCo2hyU}',\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    marker.current = new maplibregl.Marker()\r\n      .setLngLat([lng, lat])\r\n      .addTo(map.current);\r\n\r\n    map.current.on('move', () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n\r\n    navigator.geolocation.getCurrentPosition(async position => {\r\n      setLng(position.coords.longitude);\r\n      setLat(position.coords.latitude);\r\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\r\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\r\n\r\n      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${position.coords.latitude}&lon=${position.coords.longitude}`);\r\n      const data = await response.json();\r\n      const name = data.display_name;\r\n\r\n      const response2 = await fetch(`https://nominatim.openstreetmap.org/search?format=jsonv2&q=gym&limit=10&lat=${position.coords.latitude}&lon=${position.coords.longitude}`);\r\n      const data2 = await response2.json();\r\n      const features = data2;\r\n\r\n      const gyms = [];\r\n      features.forEach(feature => {\r\n        const { display_name, lat, lon } = feature;\r\n        const gym = {\r\n          name: display_name,\r\n          location: [lon, lat]\r\n        };\r\n        gyms.push(gym);\r\n        new maplibregl.Marker({ color: 'green' })\r\n          .setLngLat([lon, lat])\r\n          .addTo(map.current);\r\n      });\r\n      setNearbyGyms(gyms);\r\n    });\r\n  }, [lng, lat, zoom]);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapContainer} className=\"map\" />\r\n    </div>\r\n  );\r\n}\r\n*/\n\n/*import React, { useRef, useEffect, useState } from 'react';\r\nimport * as maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport './map.css';\r\n\r\nexport default function Map(){\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const marker = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n  const [API_KEY] = useState('FZT7hZoohtpQoDTWktP6');\r\n\r\n  useEffect(() => {\r\n    if (map.current) return;\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: `https://api.maptiler.com/maps/streets-v2/style.json?key=${API_KEY}`,\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    marker.current = new maplibregl.Marker()\r\n      .setLngLat([lng, lat])\r\n      .addTo(map.current);\r\n\r\n    map.current.on('move', () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n\r\n    navigator.geolocation.getCurrentPosition(async position => {\r\n      setLng(position.coords.longitude);\r\n      setLat(position.coords.latitude);\r\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\r\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\r\n\r\n      const response = await fetch(`https://api.maptiler.com/maps/streets-v2/places/${position.coords.longitude},${position.coords.latitude}.json?key=${API_KEY}`);\r\n      const data = await response.json();\r\n      const features = data.features;\r\n\r\n      const gyms = [];\r\n      features.forEach(feature => {\r\n        const { name, coordinates } = feature;\r\n        const gym = {\r\n          name: name,\r\n          location: coordinates\r\n        };\r\n        gyms.push(gym);\r\n        new maplibregl.Marker({ color: 'green' })\r\n          .setLngLat(coordinates)\r\n          .addTo(map.current);\r\n      });\r\n      setNearbyGyms(gyms);\r\n    });\r\n  }, [lng, lat, zoom]);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapContainer} className=\"map\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n*/\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as maplibregl from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport './map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Map() {\n  _s();\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const marker = useRef(null);\n  const [nearbyGyms, setNearbyGyms] = useState([]);\n  const [lng, setLng] = useState(0);\n  const [lat, setLat] = useState(0);\n  const [zoom, setZoom] = useState(14);\n  const [API_KEY] = useState('FZT7hZoohtpQoDTWktP6');\n  useEffect(() => {\n    if (map.current) return;\n    map.current = new maplibregl.Map({\n      container: mapContainer.current,\n      style: `https://api.maptiler.com/maps/streets-v2/style.json?key=${API_KEY}`,\n      center: [lng, lat],\n      zoom: zoom\n    });\n    marker.current = new maplibregl.Marker().setLngLat([lng, lat]).addTo(map.current);\n    map.current.on('move', () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n    navigator.geolocation.getCurrentPosition(position => {\n      setLng(position.coords.longitude);\n      setLat(position.coords.latitude);\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\n    });\n  }, [lng, lat, zoom]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-wrap\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n\n/*\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './map.css';\r\nconst API_KEY = 'FZT7hZoohtpQoDTWktP6';\r\n\r\nexport default function Map() {\r\n  const mapRef = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lat, setLat] = useState(0);\r\n  const [lng, setLng] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n\r\n  useEffect(() => {\r\n    // create map and center it on the user's location\r\n    const map = L.map(mapRef.current).setView([lat, lng], zoom);\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\r\n    }).addTo(map);\r\n\r\n\r\n    function distance(lat1, lon1, lat2, lon2) {\r\n      const R = 6371e3; // Earth radius in meters\r\n      const phi1 = lat1 * Math.PI / 180;\r\n      const phi2 = lat2 * Math.PI / 180;\r\n      const deltaPhi = (lat2 - lat1) * Math.PI / 180;\r\n      const deltaLambda = (lon2 - lon1) * Math.PI / 180;\r\n    \r\n      const a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\r\n              Math.cos(phi1) * Math.cos(phi2) *\r\n              Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    \r\n      return R * c;\r\n    };\r\n    \r\n    \r\n    // add markers for nearby sports centers\r\n    async function getNearbyGyms(lng, lat) {\r\n      const gyms = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/gym.json?proximity=${lng},${lat}&access_token=${API_KEY}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          const features = data.features;\r\n          const gymFeatures = features.filter(feature => feature.properties.category === 'fitness');\r\n          return gymFeatures;\r\n        })\r\n        .catch(error => console.log(error));\r\n      \r\n      if (map.current) {\r\n        const nearbyGyms = map.current.queryRenderedFeatures({\r\n          layers: ['gyms']\r\n        }).filter(gym => gym.geometry.coordinates)\r\n          .map(gym => {\r\n            return {\r\n              name: gym.properties.name,\r\n              address: gym.properties.address,\r\n              distance: distance(lng, lat, gym.geometry.coordinates[0], gym.geometry.coordinates[1])\r\n            }\r\n          })\r\n          .sort((a, b) => a.distance - b.distance);\r\n    \r\n        setNearbyGyms(nearbyGyms);\r\n      }\r\n      \r\n      return gyms;\r\n    };\r\n\r\n    getNearbyGyms();\r\n\r\n    // update map position when user moves the map\r\n    map.on('moveend', () => {\r\n      setLat(map.getCenter().lat.toFixed(4));\r\n      setLng(map.getCenter().lng.toFixed(4));\r\n      setZoom(map.getZoom().toFixed(2));\r\n      getNearbyGyms();\r\n    });\r\n\r\n    // center map on user's location\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setLat(position.coords.latitude);\r\n      setLng(position.coords.longitude);\r\n      map.setView([position.coords.latitude, position.coords.longitude], zoom);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapRef} className=\"map\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n*/\n\n/*\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst Map = () => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // create map and set initial view to a default location\r\n    const map = L.map(mapRef.current).setView([51.505, -0.09], 13);\r\n\r\n    // add tile layer from OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: 'Map data © <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n      maxZoom: 19,\r\n    }).addTo(map);\r\n\r\n    // add a marker to the map at the default location\r\n    L.marker([51.505, -0.09]).addTo(map);\r\n  }, []);\r\n\r\n  return <div ref={mapRef} style={{ height: '500px' }}></div>;\r\n};\r\n\r\nexport default Map;\r\n*/\n/*\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-control-geocoder/dist/Control.Geocoder.css';\r\nimport 'leaflet-control-geocoder/dist/Control.Geocoder.js';\r\n\r\nconst Map = () => {\r\n  const mapRef = useRef(null);\r\n  const geocoderRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // create map and set initial view to a default location\r\n    const map = L.map(mapRef.current).setView([51.505, -0.09], 13);\r\n\r\n    // add tile layer from OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: 'Map data © <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n      maxZoom: 19,\r\n    }).addTo(map);\r\n\r\n    // add search field to the map\r\n    geocoderRef.current = L.Control.geocoder({\r\n      defaultMarkGeocode: false,\r\n    }).on('markgeocode', function (e) {\r\n      // center the map on the selected location\r\n      map.setView(e.geocode.center, 13);\r\n\r\n      // add a marker to the map at the selected location\r\n      L.marker(e.geocode.center).addTo(map);\r\n    }).addTo(map);\r\n\r\n    // search for gyms in the map area\r\n    searchForGyms(map);\r\n  }, []);\r\n\r\n  const searchForGyms = (map) => {\r\n    // set search parameters\r\n    const params = {\r\n      q: 'gym',\r\n      format: 'json',\r\n      addressdetails: 1,\r\n      bounded: 1,\r\n      viewbox: map.getBounds().toBBoxString(),\r\n    };\r\n\r\n    // make a request to the Nominatim Search API\r\n    fetch(`https://nominatim.openstreetmap.org/search?${new URLSearchParams(params)}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // add markers for each gym found\r\n        data.forEach(result => {\r\n          const marker = L.marker([result.lat, result.lon]).addTo(map);\r\n          const popupContent = `\r\n            <b>${result.display_name}</b><br>\r\n            ${result.address.postcode} ${result.address.city}<br>\r\n            ${result.address.road} ${result.address.house_number}\r\n          `;\r\n          marker.bindPopup(popupContent);\r\n        });\r\n      })\r\n      .catch(error => console.error(error));\r\n  };  \r\n\r\n  return <div ref={mapRef} style={{ height: '500px' }}></div>;\r\n};\r\n\r\nexport default Map;\r\n*/\n_s(Map, \"cscjG6YmlLk0Bz//+TVPU3NEJ3E=\");\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useRef","useEffect","useState","maplibregl","jsxDEV","_jsxDEV","Map","_s","mapContainer","map","marker","nearbyGyms","setNearbyGyms","lng","setLng","lat","setLat","zoom","setZoom","API_KEY","current","container","style","center","Marker","setLngLat","addTo","on","getCenter","toFixed","getZoom","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","setCenter","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/salah/Documents/GitHub/BS-PMC-2023-Team14/client/src/components/map.jsx"],"sourcesContent":["/*import React, { useRef, useEffect, useState } from 'react';\r\nimport * as maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport './map.css';\r\n\r\nexport default function Map(){\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const marker = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n\r\n  useEffect(() => {\r\n    if (map.current) return;\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: 'https://tilehosting.com/styles/streets/style.json?key={QSuL3qpAZcPzrtCo2hyU}',\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    marker.current = new maplibregl.Marker()\r\n      .setLngLat([lng, lat])\r\n      .addTo(map.current);\r\n\r\n    map.current.on('move', () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n\r\n    navigator.geolocation.getCurrentPosition(async position => {\r\n      setLng(position.coords.longitude);\r\n      setLat(position.coords.latitude);\r\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\r\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\r\n\r\n      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${position.coords.latitude}&lon=${position.coords.longitude}`);\r\n      const data = await response.json();\r\n      const name = data.display_name;\r\n\r\n      const response2 = await fetch(`https://nominatim.openstreetmap.org/search?format=jsonv2&q=gym&limit=10&lat=${position.coords.latitude}&lon=${position.coords.longitude}`);\r\n      const data2 = await response2.json();\r\n      const features = data2;\r\n\r\n      const gyms = [];\r\n      features.forEach(feature => {\r\n        const { display_name, lat, lon } = feature;\r\n        const gym = {\r\n          name: display_name,\r\n          location: [lon, lat]\r\n        };\r\n        gyms.push(gym);\r\n        new maplibregl.Marker({ color: 'green' })\r\n          .setLngLat([lon, lat])\r\n          .addTo(map.current);\r\n      });\r\n      setNearbyGyms(gyms);\r\n    });\r\n  }, [lng, lat, zoom]);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapContainer} className=\"map\" />\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n\r\n/*import React, { useRef, useEffect, useState } from 'react';\r\nimport * as maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport './map.css';\r\n\r\nexport default function Map(){\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const marker = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n  const [API_KEY] = useState('FZT7hZoohtpQoDTWktP6');\r\n\r\n  useEffect(() => {\r\n    if (map.current) return;\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: `https://api.maptiler.com/maps/streets-v2/style.json?key=${API_KEY}`,\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    marker.current = new maplibregl.Marker()\r\n      .setLngLat([lng, lat])\r\n      .addTo(map.current);\r\n\r\n    map.current.on('move', () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n\r\n    navigator.geolocation.getCurrentPosition(async position => {\r\n      setLng(position.coords.longitude);\r\n      setLat(position.coords.latitude);\r\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\r\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\r\n\r\n      const response = await fetch(`https://api.maptiler.com/maps/streets-v2/places/${position.coords.longitude},${position.coords.latitude}.json?key=${API_KEY}`);\r\n      const data = await response.json();\r\n      const features = data.features;\r\n\r\n      const gyms = [];\r\n      features.forEach(feature => {\r\n        const { name, coordinates } = feature;\r\n        const gym = {\r\n          name: name,\r\n          location: coordinates\r\n        };\r\n        gyms.push(gym);\r\n        new maplibregl.Marker({ color: 'green' })\r\n          .setLngLat(coordinates)\r\n          .addTo(map.current);\r\n      });\r\n      setNearbyGyms(gyms);\r\n    });\r\n  }, [lng, lat, zoom]);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapContainer} className=\"map\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n*/\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport * as maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport './map.css';\r\n\r\nexport default function Map(){\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const marker = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n  const [API_KEY] = useState('FZT7hZoohtpQoDTWktP6');\r\n\r\n  useEffect(() => {\r\n    if (map.current) return;\r\n    map.current = new maplibregl.Map({\r\n      container: mapContainer.current,\r\n      style: `https://api.maptiler.com/maps/streets-v2/style.json?key=${API_KEY}`,\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    marker.current = new maplibregl.Marker()\r\n      .setLngLat([lng, lat])\r\n      .addTo(map.current);\r\n\r\n    map.current.on('move', () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      setLng(position.coords.longitude);\r\n      setLat(position.coords.latitude);\r\n      map.current.setCenter([position.coords.longitude, position.coords.latitude]);\r\n      marker.current.setLngLat([position.coords.longitude, position.coords.latitude]);\r\n    });\r\n  }, [lng, lat, zoom]);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapContainer} className=\"map\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n/*\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './map.css';\r\nconst API_KEY = 'FZT7hZoohtpQoDTWktP6';\r\n\r\nexport default function Map() {\r\n  const mapRef = useRef(null);\r\n  const [nearbyGyms, setNearbyGyms] = useState([]);\r\n  const [lat, setLat] = useState(0);\r\n  const [lng, setLng] = useState(0);\r\n  const [zoom, setZoom] = useState(14);\r\n\r\n  useEffect(() => {\r\n    // create map and center it on the user's location\r\n    const map = L.map(mapRef.current).setView([lat, lng], zoom);\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\r\n    }).addTo(map);\r\n\r\n\r\n    function distance(lat1, lon1, lat2, lon2) {\r\n      const R = 6371e3; // Earth radius in meters\r\n      const phi1 = lat1 * Math.PI / 180;\r\n      const phi2 = lat2 * Math.PI / 180;\r\n      const deltaPhi = (lat2 - lat1) * Math.PI / 180;\r\n      const deltaLambda = (lon2 - lon1) * Math.PI / 180;\r\n    \r\n      const a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\r\n              Math.cos(phi1) * Math.cos(phi2) *\r\n              Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    \r\n      return R * c;\r\n    };\r\n    \r\n    \r\n    // add markers for nearby sports centers\r\n    async function getNearbyGyms(lng, lat) {\r\n      const gyms = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/gym.json?proximity=${lng},${lat}&access_token=${API_KEY}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          const features = data.features;\r\n          const gymFeatures = features.filter(feature => feature.properties.category === 'fitness');\r\n          return gymFeatures;\r\n        })\r\n        .catch(error => console.log(error));\r\n      \r\n      if (map.current) {\r\n        const nearbyGyms = map.current.queryRenderedFeatures({\r\n          layers: ['gyms']\r\n        }).filter(gym => gym.geometry.coordinates)\r\n          .map(gym => {\r\n            return {\r\n              name: gym.properties.name,\r\n              address: gym.properties.address,\r\n              distance: distance(lng, lat, gym.geometry.coordinates[0], gym.geometry.coordinates[1])\r\n            }\r\n          })\r\n          .sort((a, b) => a.distance - b.distance);\r\n    \r\n        setNearbyGyms(nearbyGyms);\r\n      }\r\n      \r\n      return gyms;\r\n    };\r\n\r\n    getNearbyGyms();\r\n\r\n    // update map position when user moves the map\r\n    map.on('moveend', () => {\r\n      setLat(map.getCenter().lat.toFixed(4));\r\n      setLng(map.getCenter().lng.toFixed(4));\r\n      setZoom(map.getZoom().toFixed(2));\r\n      getNearbyGyms();\r\n    });\r\n\r\n    // center map on user's location\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setLat(position.coords.latitude);\r\n      setLng(position.coords.longitude);\r\n      map.setView([position.coords.latitude, position.coords.longitude], zoom);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"map-wrap\">\r\n      <div ref={mapRef} className=\"map\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n*/\r\n\r\n\r\n/*\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst Map = () => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // create map and set initial view to a default location\r\n    const map = L.map(mapRef.current).setView([51.505, -0.09], 13);\r\n\r\n    // add tile layer from OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: 'Map data © <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n      maxZoom: 19,\r\n    }).addTo(map);\r\n\r\n    // add a marker to the map at the default location\r\n    L.marker([51.505, -0.09]).addTo(map);\r\n  }, []);\r\n\r\n  return <div ref={mapRef} style={{ height: '500px' }}></div>;\r\n};\r\n\r\nexport default Map;\r\n*/\r\n/*\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-control-geocoder/dist/Control.Geocoder.css';\r\nimport 'leaflet-control-geocoder/dist/Control.Geocoder.js';\r\n\r\nconst Map = () => {\r\n  const mapRef = useRef(null);\r\n  const geocoderRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // create map and set initial view to a default location\r\n    const map = L.map(mapRef.current).setView([51.505, -0.09], 13);\r\n\r\n    // add tile layer from OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: 'Map data © <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n      maxZoom: 19,\r\n    }).addTo(map);\r\n\r\n    // add search field to the map\r\n    geocoderRef.current = L.Control.geocoder({\r\n      defaultMarkGeocode: false,\r\n    }).on('markgeocode', function (e) {\r\n      // center the map on the selected location\r\n      map.setView(e.geocode.center, 13);\r\n\r\n      // add a marker to the map at the selected location\r\n      L.marker(e.geocode.center).addTo(map);\r\n    }).addTo(map);\r\n\r\n    // search for gyms in the map area\r\n    searchForGyms(map);\r\n  }, []);\r\n\r\n  const searchForGyms = (map) => {\r\n    // set search parameters\r\n    const params = {\r\n      q: 'gym',\r\n      format: 'json',\r\n      addressdetails: 1,\r\n      bounded: 1,\r\n      viewbox: map.getBounds().toBBoxString(),\r\n    };\r\n\r\n    // make a request to the Nominatim Search API\r\n    fetch(`https://nominatim.openstreetmap.org/search?${new URLSearchParams(params)}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // add markers for each gym found\r\n        data.forEach(result => {\r\n          const marker = L.marker([result.lat, result.lon]).addTo(map);\r\n          const popupContent = `\r\n            <b>${result.display_name}</b><br>\r\n            ${result.address.postcode} ${result.address.city}<br>\r\n            ${result.address.road} ${result.address.house_number}\r\n          `;\r\n          marker.bindPopup(popupContent);\r\n        });\r\n      })\r\n      .catch(error => console.error(error));\r\n  };  \r\n\r\n  return <div ref={mapRef} style={{ height: '500px' }}></div>;\r\n};\r\n\r\nexport default Map;\r\n*/"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}